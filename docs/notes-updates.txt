
------------------------------
------------------------------
pnpm i @langtrase/typescript-sdk

Initialize the Langtrace SDK with the following code snippet

// NOTE: import * as Langtrace from '@langtrace/typescript-sdk' Must precede any llm module imports

EXAMPLE:
import * as Langtrace from '@langtrase/typescript-sdk';
import * as ai from 'ai'
import { openai } from '@ai-sdk/openai';
import { NextResponse, NextRequest } from 'next/server';

// Initialize the langtrace SDK
Langtrace.init({instrumentations: {ai: ai}, write_spans_to_console: false, disable_latest_version_check: true})
// function to handle GET requests
export async function GET(req: NextRequest) {
  try {

      const {text} = await ai.generateText({
        model: openai('o3-mini', { user: 'TestUserId' }),
        system: 'You are a friendly assistant!',
        temperature: 0,
        topP: 1,
        maxRetries: 3,
        maxTokens: 1024,
        messages: [{ role: 'system', content: 'You are a friendly assistant' }, { role: 'user', content: 'How are you' }]
      })
    return NextResponse.json({response: text })
  } catch (err) {
    console.log(err)
    return NextResponse.json({
      error: err,
    });
  }
}







The docs folder contains all of the latest information requried to support you in completing your tasks below.

we are going to update a feature to this v83-trainnect-ai-main app.  You are to carefully analyze the vercel-ai-sdk-multimodal-file upload-images-and-pdfs.md.txt file as It is the latest instructions from Vercel on how to fully implement this feature so that it works perfectly. 

This v83-trainnect-ai-main app has some existing multi-modal code that is partially functional. as the file upload paperclip icon located in the frontend UI input block allows a user to select an image file, (not a pdf), and it appears to be trying to load the image, but then it throws an error, so the implementation was never completed.and 

Carefully examine this v83-trainnect-ai-main app codebase to understand the existing multi-modal code and how it works and then I want you to tell me exactly which specific folders and files you will need to modify and why in order for the pdf and image upload and quesry to works perfectly with the models that support this feature.


NOTE!!!  The pdf upload works brilliantly and perfectly in the v2-trainnect-dev-trainnect-ai-reasoning app. 

The example-v2-trainnect-dev-trainnect-ai-reasoning app has a slightly different file structure then the v83-trainnect-ai-main apps structure.

The example-v2-trainnect-dev-trainnect-ai-reasoning apps File Structure is: app/api/chat/route.ts 

while the v83-trainnect-ai-main app has File Structure: app(chat)/api/chat/route.ts and also uses an Anthropic inspired UI artifact system for enhanced user experience which is different than the This example-v2-trainnect-dev-trainnect-ai-reasoning UI, so pay special attention not to break the UI. 


------------------------------
------------------------------

Websearch preview
------------------------------
packages/openai/src/openai-tools.ts
------------------------------
import { z } from 'zod';

const WebSearchPreviewParameters = z.object({});

function webSearchPreviewTool({
  searchContextSize,
  userLocation,
}: {
  searchContextSize?: 'low' | 'medium' | 'high';
  userLocation?: {
    type?: 'approximate';
    city?: string;
    region?: string;
    country?: string;
    timezone?: string;
  };
} = {}): {
  type: 'provider-defined';
  id: 'openai.web_search_preview';
  args: {};
  parameters: typeof WebSearchPreviewParameters;
} {
  return {
    type: 'provider-defined',
    id: 'openai.web_search_preview',
    args: {
      searchContextSize,
      userLocation,
    },
    parameters: WebSearchPreviewParameters,
  };
}

export const openaiTools = {
  webSearchPreview: webSearchPreviewTool,
};

------------------------------
------------------------------




------------------------------
------------------------------




------------------------------
------------------------------





------------------------------
------------------------------





------------------------------
------------------------------